//#pragma once
//让编译器确保头文件只被包含一次，无论在编译过程中被直接或间接包含多少次。
//当编译器遇到 #pragma once 时，它会记录该头文件，并在后续遇到该头文件时跳过其内容，从而防止多重包含。

#ifndef THREDPOOL_H
#define THREDPOOL_H

#include <string>
#include <queue>
#include <memory>//保持拉长对象的生命周期，自动释放资源
#include<atomic>
#include<mutex>
#include<condition_variable>
#include <functional>
#include <unordered_map>
//模板类的代码写在头文件中 

// Any类型：可以接收任意数据的类型
class Any
{
public:
	Any() = default;
	~Any() = default;
	Any(const Any&) = delete;
	Any& operator=(const Any&) = delete;
	Any(Any&&) = default;
	Any& operator=(Any&&) = default;

	// 这个构造函数可以让Any类型接收任意其它的数据
	template<typename T>  // T:int    Derive<int>
	Any(T data) : base_(std::make_unique<Derive<T>>(data))
	{}

	// 这个方法能把Any对象里面存储的data数据提取出来
	template<typename T>
	T cast_()
	{
		// 我们怎么从base_找到它所指向的Derive对象，从它里面取出data成员变量
		// 基类指针 =》 派生类指针   RTTI
		Derive<T>* pd = dynamic_cast<Derive<T>*>(base_.get());
		if (pd == nullptr)
		{
			throw "type is unmatch!";
		}
		return pd->data_;
	}
private:
	// 基类类型
	class Base
	{
	public:
		virtual ~Base() = default;
	};

	// 派生类类型
	template<typename T>
	class Derive : public Base
	{
	public:
		Derive(T data) : data_(data)
		{}
		T data_;  // 保存了任意的其它类型
	};

private:
	// 定义一个基类的指针
	std::unique_ptr<Base> base_;
};

//Task类型声明的前置声明
class Task;

//实现一个信号量类
class Semaphore
{
public:
	Semaphore(int limit = 0)
	:resLimit_(limit)
	{}
	~Semaphore() = default;

	//获取一个信号量资源
	void wait()
	{
		std::unique_lock<std::mutex>lock(mtx_);
		//等待信号量有资源，没有资源的话，会阻塞当前线程
		cond_.wait(lock, [&]()-> bool {return resLimit_ > 0; });
		resLimit_--;
	}
	//增加一个信号量资源
	void post()
	{
		std::unique_lock<std::mutex>lock(mtx_);
		resLimit_++;
		cond_.notify_all();
	}
private:
	int resLimit_;
	std::condition_variable  cond_;
	std::mutex mtx_;
};

//实现接受提交到线程池的task任务执行完成后的返回值类型的Result
class Result
{
public:
	Result(std::shared_ptr<Task> task, bool isValid = true);
	~Result() = default;
	 
	//问题一：setVal方法，获取任务执行完的返回值
	void setVal(Any any);
	//问题二：get方法，用户调用这个方法获取task的返回值
	Any get();
private:
	Any any_;						//存储任务的返回值
	Semaphore sem_;					//线程通信信号量
	std::shared_ptr<Task> task_;	//指向对于获取返回值的任务对象  引用计数不为0的时候 不会析构掉的 绑定在一起了
	std::atomic_bool isValid_;		//返回值无效
};

//using namespace std; //防止全局名字污染  不要写
//任务抽象基类
class Task
{
public:
	Task();
	~Task() = default;
	void exec();
	void setResult(Result* res);
	//用户可以自定义任意任务类型，从Task继承，重写rn方法，实现自定义任务处理
	virtual Any run() = 0;  //virtual T run() = 0; 虚函数和模板不能放在一起使用
private:
	Result* result_;//这里如果也使用shared_ptr 会造成智能指针引用计数 交叉引用的问题
	//Result对象的生命周期 大于 Task的生命周期
};

//线程池支持的模式
enum class PoolMode
{
	MODE_FIXED,//固定数量的线程
	MODE_CACHED,//数量动态可增长的线程
};

//线程类型
class Thread
{
public:
	//线程函数对象类型
	using ThreadFunc = std::function<void(int)>;
	//线程构造
	Thread(ThreadFunc func);
	//线程析构
	~Thread();

	//启动线程
	void start();

	//获取线程id
	int getId() const;
private:
	ThreadFunc func_;
	static int genernateId_;//静态成员变量 需要类外初始化
	int threadId_; //保存线程id
};

//线程池类型  里面放很多个线程
class ThreadPool
{
public:
	//线程池构造
	ThreadPool();

	//线程池析构
	~ThreadPool();

	// 设置线程池的工作模式
	void setMode(PoolMode mode);

	//设置task任务队列上限阈值
	void setTaskQueMaxThreshHold(int threshhold);

	//设置task任务队列上限阈值
	void setThreadSizeThreshHold(int threshhold);

	//给线程池提交任务
	Result submitTask(std::shared_ptr<Task> sp);

	//开启线程池
	void start(int initThreadSize = std::thread::hardware_concurrency());//初始为机器的CPU核心数量

	ThreadPool(const ThreadPool&) = delete;
	ThreadPool& operator=(const ThreadPool&) = delete;


private:
	//定义线程函数
	void threadFunc(int threadid);

	//检查pool运行状态
	bool checkRunningState() const;
private:
	//std::vector<Thread*> threads_;   裸指针改为智能智能指针
	//std::vector<std::unique_ptr<Thread>> threads_;//线程列表
	std::unordered_map<int,std::unique_ptr<Thread>> threads_;//线程列表
	int initThreadSize_;//初始的线程个数   int表示有符号的，包含负数，但是这里不可能为负数 可以写unsigned int
	int threadSizeThreadHol_;//线程数量上限的阈值
	std::atomic_int curThreadSize_;//记录当前线程的总数量
	std::atomic_int idleThreadSize_;//记录空闲线程的数量

	//std::queue<Task*> 出作用域就会被释放，反而变为野指针 不能传入裸指针
	std::queue<std::shared_ptr<Task>> taskQue_;//任务队列  
	std::atomic_uint taskSize_;//任务数量
	int taskQueMaxThreshHold_; //任务队列数量上限的阈值

	std::mutex taskQueMtx_;//保证任务队列的线程安全
	std::condition_variable notFull_;//表示队列不满，可以继续生产
	std::condition_variable notEmpty_;//表示队列不空，可以继续消费
	std::condition_variable exitCond_;//等待资源全全部回收

	PoolMode poolMode_;	//当前线程池的工作模式

	//表示当前线程池的启动状态
	std::atomic_bool isPoolRunning_;

};

#endif // THREDPOOL_H
